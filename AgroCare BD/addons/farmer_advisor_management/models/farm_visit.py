# -*- coding: utf-8 -*-
from odoo import models, fields, api, _

class FarmVisit(models.Model):
    _name = 'farm.visit'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _description = 'Farmer Visit'
    _order = 'visit_date desc'

    name = fields.Char(string='Visit Reference', required=True, copy=False, readonly=True, default=lambda self: _('New'))
    farmer_id = fields.Many2one('farm.farmer', string='Farmer', required=True, tracking=True)
    field_id = fields.Many2one('farm.field', string='Field', required=True, domain="[('farmer_id', '=', farmer_id)]")
    visit_date = fields.Datetime(string='Visit Date', required=True, default=fields.Datetime.now)
    assigned_to_id = fields.Many2one('res.users', string='Assigned To', default=lambda self: self.env.user, tracking=True)
    purpose = fields.Text(string='Purpose of Visit')
    state = fields.Selection([
        ('scheduled', 'Scheduled'),
        ('in_progress', 'In Progress'),
        ('done', 'Done'),
        ('cancelled', 'Cancelled'),
    ], string='Status', default='scheduled', tracking=True)
    
    problem_ids = fields.One2many('farm.problem', 'visit_id', string='Problems')
    
    # Survey fields
    survey_id = fields.Many2one('survey.survey', string='Survey Template')
    response_id = fields.Many2one('survey.user_input', string="Survey Response", readonly=True)

    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            if vals.get('name', _('New')) == _('New'):
                vals['name'] = self.env['ir.sequence'].next_by_code('farm.visit.sequence') or _('New')
        return super().create(vals_list)

    def action_start_visit(self):
        self.write({'state': 'in_progress'})

    def action_mark_as_done(self):
        self.write({'state': 'done'})

    def action_cancel_visit(self):
        self.write({'state': 'cancelled'})
        
    def action_start_survey(self):
        self.ensure_one()
        return {
            'type': 'ir.actions.act_url',
            'name': "Start Survey",
            'target': 'new',
            'url': self.survey_id.get_start_url() + f"?answer_token={self.id}",
        }

class FarmProblem(models.Model):
    _name = 'farm.problem'
    _description = 'Visit Problem'

    visit_id = fields.Many2one('farm.visit', string='Visit')
    problem_type = fields.Selection([
        ('disease', 'Disease'),
        ('pest', 'Pest'),
        ('nutrient', 'Nutrient Deficiency'),
        ('water', 'Water Management'),
        ('other', 'Other'),
    ], string='Problem Type')
    description = fields.Text(string='Description', required=True)
    severity_level = fields.Selection([('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], string='Severity')
    problem_images_ids = fields.Many2many('ir.attachment', string="Images")
    recommendation_ids = fields.One2many('farm.recommendation', 'problem_id', string='Recommendations')
    ai_suggestion = fields.Text(string="AI Suggestion", readonly=True, help="Suggestions generated by AI analysis.")

    def analyze_with_ai(self):
        # This is a placeholder for the actual AI API call.
        # Implementation requires an external service like Google Gemini.
        for rec in self:
            # 1. Get the problem description
            problem_desc = rec.description
            # 2. Get the first image (if any)
            image_data = rec.problem_images_ids[0].datas if rec.problem_images_ids else None
            
            # Here you would make the API call to your chosen AI service.
            # Example (conceptual):
            # response = gemini_api.analyze(description=problem_desc, image=image_data)
            # rec.ai_suggestion = response.get('suggestion')
            
            # For now, we'll just put a placeholder text.
            rec.ai_suggestion = "AI Analysis feature is not yet connected to a live service. This is a placeholder."
        return True

class FarmRecommendation(models.Model):
    _name = 'farm.recommendation'
    _description = 'Problem Recommendation'

    problem_id = fields.Many2one('farm.problem', string='Problem')
    recommendation_text = fields.Text(string='Recommendation', required=True)
    suggested_product_id = fields.Many2one('product.product', string='Suggested Product', domain="[('product_tmpl_id.detailed_type', '=', 'consu')]")
    follow_up_date = fields.Date(string='Follow-up Date')